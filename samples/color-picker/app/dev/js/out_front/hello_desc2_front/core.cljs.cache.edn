{:rename-macros {}, :renames {}, :externs {document {getElementById {}}}, :use-macros {}, :excludes #{}, :name hello-desc2-front.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core}, :uses {atom reagent.core}, :defs {state {:name hello-desc2-front.core/state, :file "src_front/hello_desc2_front/core.cljs", :line 4, :column 1, :end-line 4, :end-column 15, :meta {:file "/Users/user/dev/proj/hello-desc2/src_front/hello_desc2_front/core.cljs", :line 4, :column 10, :end-line 4, :end-column 15}, :tag any}, root-component {:protocol-inline nil, :meta {:file "/Users/user/dev/proj/hello-desc2/src_front/hello_desc2_front/core.cljs", :line 6, :column 7, :end-line 6, :end-column 21, :arglists (quote ([]))}, :name hello-desc2-front.core/root-component, :variadic false, :file "src_front/hello_desc2_front/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mount-root {:protocol-inline nil, :meta {:file "/Users/user/dev/proj/hello-desc2/src_front/hello_desc2_front/core.cljs", :line 12, :column 7, :end-line 12, :end-column 17, :arglists (quote ([setting]))}, :name hello-desc2-front.core/mount-root, :variadic false, :file "src_front/hello_desc2_front/core.cljs", :end-column 17, :method-params ([setting]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([setting]))}, init! {:protocol-inline nil, :meta {:file "/Users/user/dev/proj/hello-desc2/src_front/hello_desc2_front/core.cljs", :line 16, :column 7, :end-line 16, :end-column 12, :arglists (quote ([setting]))}, :name hello-desc2-front.core/init!, :variadic false, :file "src_front/hello_desc2_front/core.cljs", :end-column 12, :method-params ([setting]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([setting]))}}, :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:color :style :option :h1 :on-change :p :message :select}, :order [:message :h1 :style :color :select :on-change :option :p]}, :doc nil}